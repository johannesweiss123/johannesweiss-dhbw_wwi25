package de.dhbw;import org.junit.jupiter.api.Test;import java.io.FileWriter;import java.io.IOException;import java.net.InetAddress;import java.text.SimpleDateFormat;import java.util.Base64;import java.util.Date;/** * Jede Testausführung schreibe Inhalte in eine Datei namens ID.log. * Spätestens wenn ihr euer Analyseergebnis habt, müsst ihr auch die Datei commiten. * In der Commit Nachricht muss für mich erkennbar sein, dass dies der Commit ist, in dem euer finales Analyseergebnis ist. */class DebuggingTest {    HappyLeapYearDetector underTest = new HappyLeapYearDetector();    @Test    void task1() {        String inputYear = parse("MjAyeA==");        underTest.isHappyLeapYear(inputYear);        // TODO: In welcher Zeile in deinem Code tritt die Exception auf? Was ist das Problem?        // Bei der Ausführung des Tests wird eine ID generiert. Notiere diese zusammen mit dem Ergebnis deiner Analyse hier im Code als Kommentar.        // DEIN ANALYSEERGEBNIS        // ID: z.B: TWFjQm9vay1Qcm8tdm9uLVJhbGYtMe5mcml0ei5ib3hfX28yMDI0LTEwLTA2IDEzOjE0OjM3        // Hier könnte dein Textstehen    }    @Test    void task2() {        String inputYear = parse("LTkyMTMxMjM=");        underTest.isHappyLeapYear(inputYear);        // TODO: Was ist hier komisch? Welche Regel würdest du hinzufügen? Programmiere die Regel (ggf. mit ChatGPT).        // Die neue Regel und der Implementierung dazu müssen in einem separaten Commit sein.        // DEIN ANALYSEERGEBNIS        // ...    }    /**     * Diese Funktion ist für euch Studies völlig uninteressant. Hier gibt es nichts zu sehen ;-)     */    private static String parse(String src) {        String methodName = StackWalker.getInstance().walk(frames -> frames.skip(1).findFirst().get().getMethodName());        try (var writer = new FileWriter("ID.log", false)) {            String decoded = InetAddress.getLocalHost().getHostName() + "___" + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());            String encodedString = Base64.getEncoder().encodeToString(decoded.getBytes());            String str = "ID - " + methodName + ": " + encodedString;            writer.write(str);            System.out.println(new String(Base64.getDecoder().decode(encodedString)));        } catch (IOException e) {            System.out.println("Method: " + methodName);            System.out.println("Error writing file: " + e.getMessage());            System.out.println("Failed: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));        }        return new String(Base64.getDecoder().decode(src));    }}